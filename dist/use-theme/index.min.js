const e=new Set(["auto","light","dark"]),t="auto",a="dark",o="light",n="useTheme",r=()=>{const r=window.matchMedia("(prefers-color-scheme: dark)");return{applyTheme:s=>{const c=e.has(s)?s:t,d=c===a||"auto"===c&&r.matches;document.documentElement.classList.remove(a,o),document.documentElement.classList.add(d?a:o),(e=>{try{e&&localStorage.setItem(n,e)}catch(t){console.warn("localStorage is disabled. Failed to store theme preference.")}})(c)},getStoredTheme:()=>{const a=localStorage.getItem(n);return e.has(a)?a:t},prefersDark:r}},s=()=>{const a=document.querySelector("[x-use-theme]");if(!a)return;const o=a.getAttribute("x-use-theme"),s=localStorage.getItem(n);let c=t;o&&e.has(o)?c=o:s&&e.has(s)&&(c=s);const{prefersDark:d,applyTheme:l,getStoredTheme:m}=r();l(c),d.addEventListener("change",(()=>{"auto"===m()&&l("auto")}))},c=t=>{(()=>{const{applyTheme:t,getStoredTheme:a}=r();window.Alpine.magic("useTheme",(()=>{const o={value:a()};return{set:a=>{e.has(a)&&(t(a),o.value=a)},get:()=>o.value,get value(){return o.value},set value(a){e.has(a)&&(t(a),o.value=a)}}}))})(),s()},{applyTheme:d,getStoredTheme:l}=r();d(l()),document.addEventListener("DOMContentLoaded",(()=>{s()})),document.addEventListener("alpine:init",(()=>{c()})),document.addEventListener("livewire:navigated",(()=>{c()}));

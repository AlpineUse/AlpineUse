const e=new Set(["auto","light","dark"]),t="auto",a="dark",o="useTheme",n=()=>{const n=window.matchMedia("(prefers-color-scheme: dark)");return{applyTheme:r=>{const s=e.has(r)?r:t,l=s===a||"auto"===s&&n.matches;document.documentElement.classList.toggle(a,l),document.documentElement.classList.toggle("light",!l),(e=>{try{e&&localStorage.setItem(o,e)}catch(t){console.warn("localStorage is disabled. Failed to store theme preference.")}})(s)},getStoredTheme:()=>{const a=localStorage.getItem(o);return e.has(a)?a:t},prefersDark:n}},r=()=>{const{applyTheme:t,getStoredTheme:a}=n();window.Alpine.magic("useTheme",(()=>{const o={value:a()};return{set:a=>{e.has(a)&&(t(a),o.value=a)},get:()=>o.value,get value(){return o.value},set value(a){e.has(a)&&(t(a),o.value=a)}}}))},{applyTheme:s,getStoredTheme:l}=n();s(l()),document.addEventListener("DOMContentLoaded",(()=>{(()=>{const a=document.querySelector("[x-use-theme]");if(!a)return;const r=a.getAttribute("x-use-theme"),s=localStorage.getItem(o);let l=t;r&&e.has(r)?l=r:s&&e.has(s)&&(l=s);const{prefersDark:c,applyTheme:d,getStoredTheme:u}=n();d(l),c.addEventListener("change",(()=>{"auto"===u()&&d("auto")}))})()})),document.addEventListener("alpine:init",(()=>{r()})),document.addEventListener("livewire:navigated",(()=>{r()}));
